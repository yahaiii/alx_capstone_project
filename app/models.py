"""
This module defines the database models for the application.

Classes:
- User: Represents a user in the system.
- Transaction: Represents a financial transaction.
- Category: Represents a category for grouping transactions.
- Budget: Represents a budget for managing expenses.
- Goal: Represents a financial goal.
- Report: Represents a generated report.
- Insight: Represents an insight generated by the system.
- Notification: Represents a notification for the user.
"""

from app import db
from datetime import datetime
from werkzeug.security import generate_password_hash, check_password_hash

class User(db.Model):
    """
    Represents a user in the system.
    
    Fields:
        - id: The unique identifier for the user.
        - username: The username of the user.
        - first_name: The first name of the user.
        - last_name: The last name of the user.
        - email: The email address of the user.
        - password_hash: The hashed password of the user.
    
    Methods:
        - set_password: Set the password for the user.
        - check_password: Check if the password is correct for the user.
    """
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    first_name = db.Column(db.String(50), nullable=False)
    last_name = db.Column(db.String(50), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)

    def set_password(self, password):
        """
        Set the password for the user.

        Args:
            password (str): The password to set.

        Returns:
            None
        """
        self.password_hash = generate_password_hash(password)
    
    def check_password(self, password):
        """
        Check if the password is correct for the user.

        Args:
            password (str): The password to check.

        Returns:
            bool: True if the password is correct, False otherwise.
        """
        return check_password_hash(self.password_hash, password)
        

class Transaction(db.Model):
    """
    Represents a financial transaction.

    Fields:
    - id: The unique identifier for the transaction.
    - date: The date of the transaction.
    - description: The description of the transaction.
    - amount: The amount of the transaction.
    - category_id: The foreign key to the category of the transaction.
    - category: The relationship to the category of the transaction.
    - user_id: The foreign key to the user associated with the transaction.
    - user: The relationship to the user associated with the transaction.
    """
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.Date)
    description = db.Column(db.String(255))
    amount = db.Column(db.Float)
    category_id = db.Column(db.Integer, db.ForeignKey('category.id'))
    category = db.relationship('Category', back_populates='transactions')
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    user = db.relationship('User', back_populates='transactions')

class Category(db.Model):
    """
    Represents a category for grouping transactions.

    Fields:
    - id: The unique identifier for the category.
    - name: The name of the category.
    - transactions: The relationship to the transactions in the category.
    - user_id: The foreign key to the user associated with the category.
    - user: The relationship to the user associated with the category.
    """
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50))
    transactions = db.relationship('Transaction', back_populates='category')
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    user = db.relationship('User', back_populates='categories')

class Budget(db.Model):
    """
    Represents a budget for managing expenses.

    Fields:
    - id: The unique identifier for the budget.
    - name: The name of the budget.
    - total_budgeted_amount: The total budgeted amount for the budget.
    - user_id: The foreign key to the user associated with the budget.
    - user: The relationship to the user associated with the budget.
    """
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100))
    total_budgeted_amount = db.Column(db.Float)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    user = db.relationship('User', back_populates='budgets')

class Goal(db.Model):
    """
    Represents a financial goal.

    Fields:
    - id: The unique identifier for the goal.
    - name: The name of the goal.
    - target_amount: The target amount for the goal.
    - user_id: The foreign key to the user associated with the goal.
    - user: The relationship to the user associated with the goal.
    """
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100))
    report_type = db.Column(db.String(50))
    generation_date = db.Column(db.DateTime, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    user = db.relationship('User', back_populates='reports')

class Insight(db.Model):
    """
    Represents an insight generated by the system.

    Fields:
    - id: The unique identifier for the insight.
    - content: The content of the insight.
    - generation_date: The date the insight was generated.
    - user_id: The foreign key to the user associated with the insight.
    - user: The relationship to the user associated with the insight.
    """
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text)
    generation_date = db.Column(db.DateTime, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    user = db.relationship('User', back_populates='insights')

class Notification(db.Model):
    """
    Represents a notification for the user.

    Fields:
    - id: The unique identifier for the notification.
    - title: The title of the notification.
    - content: The content of the notification.
    - timestamp: The timestamp of the notification.
    - user_id: The foreign key to the user associated with the notification.
    - user: The relationship to the user
    """
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100))
    content = db.Column(db.Text)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    user = db.relationship('User', back_populates='notifications')
